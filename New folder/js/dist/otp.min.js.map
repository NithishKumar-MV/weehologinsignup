{"version":3,"sources":["otp.js"],"names":["moveToNext","input","nextInputId","value","getAttribute","maxLength","currentLength","id","getElementById","removeAttribute","document","submit","moveToPrev","prevInputId","addEventListener","event","this","key","inputs","querySelectorAll","forEach","nextInput","prevInput","previousElementSibling","currentInput","nextElementSibling","length","hasAttribute","focus","setAttribute","index2","disabled","button","classList","remove","add","window"],"mappings":"aAAA,SAAAA,WAAAC,EAAAC,GAEA,IAASF,EAAWC,SAAOC,EAAAA,aAAa,cACVD,EAAME,MAACC,SAGXC,IAAlBC,IAAkBD,EAAtBE,IACQL,SAAWM,eAAeN,GAAAO,gBAAA,YAC1BC,SAASF,eAAeN,GAAaO,SAGrCC,SAAAF,eAAA,WAAAG,UAMZ,SAASC,WAAWX,EAAOY,GAAAA,IAA3BZ,EAASW,MAAWX,QAAOY,IAAaZ,EAAAM,KAChCN,SAAAO,eAAAK,GAAuCJ,gBAAe,YACtDC,SAASF,eAAeK,GAAaJ,SAM7CC,SAASF,eAAe,UAAUM,iBAAiB,QAAS,SAAUC,GAA7DP,cAADO,EAACP,KACDO,WAAAC,KAAc,YAKtBN,SAASF,eAAe,UAAUM,iBAAiB,QAAS,SAAUC,GAChD,cAAdA,EAAME,KACNL,WAAUI,KAAO,YAKrBN,SAAIK,eAAc,UAAaD,iBAAA,QAAA,SAAAC,GACV,cAAjBH,EAAUK,KACbL,WAAAI,KAAA,YAMLE,IAAMA,OAASR,SAAAS,iBAAmB,SAC9BlB,OAAMa,SAAAA,cAAN,UACII,OAAAE,QACAC,SAAAA,EAAYpB,GADZA,EAEAqB,iBAAkBC,QAAAA,SAAAA,GAFlB,IAAMC,EAAevB,EAIjBuB,EAAYvB,EAAZwB,mBACAD,EAAarB,EAAboB,uBAEH,EAAAC,EAAArB,MAAAuB,OAFGF,EAAarB,MAAQ,IAOxBkB,GAAAA,EAAAM,aAAA,aAAA,KAAAH,EAAArB,QAFGkB,EAAUZ,gBAAgB,YAIxBQ,EAAQW,SAGIC,cAAN5B,EAAAA,KACAA,OAAME,QAAN,SAAAF,EAAA6B,GACUF,GAAVE,GAAAR,IACHrB,EAAA4B,aAAA,YAAA,GALL5B,EAAAE,MAAA,GAOHmB,EAAAM,WAKAV,OAAA,GAAAa,UAAA,KAAAb,OAAA,GAAAf,MA7BT6B,OAAAC,UAAAC,OAAA,UA2BYF,OAAOC,UAAUE,IAAI,eAOjCC,OAAOtB,iBAAiB,OAAQ,WAAA,OAAMI,OAAO,GAAGU","file":"otp.min.js","sourcesContent":["// JavaScript code in otp.js\r\n\r\nfunction moveToNext(input, nextInputId) {\r\n    const maxLength = parseInt(input.getAttribute('maxlength'));\r\n    const currentLength = input.value.length;\r\n\r\n    if (currentLength === maxLength) {\r\n        if (nextInputId !== input.id) {\r\n            document.getElementById(nextInputId).removeAttribute('disabled');\r\n            document.getElementById(nextInputId).focus();\r\n        } else {\r\n            // If the current input is the last one, submit the form or take further action\r\n            document.getElementById('otpForm').submit();\r\n        }\r\n    }\r\n}\r\n\r\nfunction moveToPrev(input, prevInputId) {\r\n    if (input.value.length === 0 && prevInputId !== input.id) {\r\n        document.getElementById(prevInputId).removeAttribute('disabled');\r\n        document.getElementById(prevInputId).focus();\r\n    }\r\n}\r\n\r\n// Add event listeners for handling backspace key press\r\ndocument.getElementById('input2').addEventListener('keyup', function (event) {\r\n    if (event.key === 'Backspace') {\r\n        moveToPrev(this, 'input1');\r\n    }\r\n});\r\n\r\ndocument.getElementById('input3').addEventListener('keyup', function (event) {\r\n    if (event.key === 'Backspace') {\r\n        moveToPrev(this, 'input2');\r\n    }\r\n});\r\n\r\ndocument.getElementById('input4').addEventListener('keyup', function (event) {\r\n    if (event.key === 'Backspace') {\r\n        moveToPrev(this, 'input3');\r\n    }\r\n});\r\n\r\nconst inputs = document.querySelectorAll(\"input\"),\r\nbutton = document.querySelector(\"button\");\r\n\r\ninputs.forEach((input, index1) => {\r\n    input.addEventListener(\"keyup\", (e) => {\r\n        const currentInput = input,\r\n        nextInput = input.nextElementSibling, \r\n        prevInput = input.previousElementSibling;\r\n\r\n        if (currentInput.value.length > 1) { \r\n            currentInput.value = \"\";\r\n            return;\r\n        }\r\n\r\n        if (nextInput && nextInput.hasAttribute(\"disabled\") && currentInput.value !== \"\") {\r\n            nextInput.removeAttribute(\"disabled\");\r\n            nextInput.focus();\r\n        }\r\n\r\n        if (e.key === \"Backspace\") {\r\n            inputs.forEach((input, index2) => {\r\n                if (index1 <= index2 && prevInput) {\r\n                    input.setAttribute(\"disabled\", true);\r\n                    input.value = \"\";\r\n                    prevInput.focus();\r\n                }\r\n            });\r\n        }\r\n\r\n        if (!inputs[3].disabled && inputs[3].value !== \"\") {\r\n            button.classList.add(\"active\");\r\n            return;\r\n        }\r\n        button.classList.remove(\"active\");\r\n    });\r\n});\r\n\r\nwindow.addEventListener(\"load\", () => inputs[0].focus());"]}